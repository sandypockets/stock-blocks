name: Release Obsidian Plugin

# Add permissions for the workflow
permissions:
  contents: write
  pull-requests: read

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
      - 'manifest.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should-release: ${{ steps.version.outputs.should-release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: version
        run: |
          # Get the current versions
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          MANIFEST_VERSION=$(node -p "require('./manifest.json').version")
          
          echo "Package version: $PACKAGE_VERSION"
          echo "Manifest version: $MANIFEST_VERSION"
          
          # Check if versions match
          if [ "$PACKAGE_VERSION" != "$MANIFEST_VERSION" ]; then
            echo "❌ Version mismatch between package.json ($PACKAGE_VERSION) and manifest.json ($MANIFEST_VERSION)"
            exit 1
          fi
          
          # Check if this version already has a release
          if git tag -l | grep -q "^$PACKAGE_VERSION$"; then
            echo "🏷️  Version $PACKAGE_VERSION already has a release tag"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if version changed in the last commit
          git diff HEAD~1 HEAD --name-only | grep -E "(package\.json|manifest\.json)" || {
            echo "📝 No version files changed in this commit"
            echo "should-release=false" >> $GITHUB_OUTPUT
            exit 0
          }
          
          # Get previous versions to compare
          PREV_PACKAGE_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
          PREV_MANIFEST_VERSION=$(git show HEAD~1:manifest.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version" 2>/dev/null || echo "0.0.0")
          
          echo "Previous package version: $PREV_PACKAGE_VERSION"
          echo "Previous manifest version: $PREV_MANIFEST_VERSION"
          
          # Check if version actually changed
          if [ "$PACKAGE_VERSION" != "$PREV_PACKAGE_VERSION" ] || [ "$MANIFEST_VERSION" != "$PREV_MANIFEST_VERSION" ]; then
            echo "🚀 Version changed from $PREV_PACKAGE_VERSION to $PACKAGE_VERSION - will create release"
            echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
            echo "should-release=true" >> $GITHUB_OUTPUT
          else
            echo "📝 Version unchanged - no release needed"
            echo "should-release=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: check-version
    if: needs.check-version.outputs.should-release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Build plugin
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -f "main.js" ]; then
            echo "❌ main.js not found after build"
            exit 1
          fi
          
          if [ ! -f "manifest.json" ]; then
            echo "❌ manifest.json not found"
            exit 1
          fi
          
          # Verify versions still match after build
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          MANIFEST_VERSION=$(node -p "require('./manifest.json').version")
          
          if [ "$PACKAGE_VERSION" != "$MANIFEST_VERSION" ]; then
            echo "❌ Version mismatch after build: package.json ($PACKAGE_VERSION) vs manifest.json ($MANIFEST_VERSION)"
            exit 1
          fi
          
          echo "✅ Build verification passed"
          echo "📦 Built plugin version: $PACKAGE_VERSION"

      - name: Create release notes
        id: release-notes
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          
          # Generate SHA256 checksums for all release assets
          MAIN_SHA=$(sha256sum main.js | cut -d' ' -f1)
          MANIFEST_SHA=$(sha256sum manifest.json | cut -d' ' -f1)
          STYLES_SHA=$(sha256sum styles.css | cut -d' ' -f1)
          
          # Create release notes with checksums
          cat > release-notes.md << EOF
          ## Stock Blocks Plugin v$VERSION
          
          ### Checksums (SHA256)
          \`\`\`
          main.js:      $MAIN_SHA
          manifest.json: $MANIFEST_SHA
          styles.css:   $STYLES_SHA
          \`\`\`
          
          ### Verification
          After downloading, verify file integrity:
          \`\`\`bash
          sha256sum main.js manifest.json styles.css
          \`\`\`
          EOF
          
          # Also create a separate checksums file
          cat > SHA256SUMS << EOF
          $MAIN_SHA  main.js
          $MANIFEST_SHA  manifest.json
          $STYLES_SHA  styles.css
          EOF

      - name: Create Release
        id: create-release
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          
          # Create release using GitHub CLI
          gh release create "$VERSION" \
            --title "$VERSION" \
            --notes-file release-notes.md \
            ./main.js \
            ./manifest.json \
            ./styles.css \
            ./SHA256SUMS
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release completed
        run: |
          echo "🎉 Release ${{ needs.check-version.outputs.version }} created successfully!"
          echo "📦 Assets uploaded: main.js, manifest.json, styles.css, SHA256SUMS"
          echo "🔐 SHA256 checksums included for security verification"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.check-version.outputs.version }}"